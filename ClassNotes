Namaste React

# md stands for markdown document

# Plan your code

<!-- * Header
    - Navbar
        -logo
        - anchor links (Home, About us , contact us , cart)
* Body
    -searchbar and search button
    -Resaturant card container
      - cards (6)
      -rating , cuisine ,image , restaurant name
* Footer
    - copyright
    - Description about  the company .   -->

# Props stands for properties

# Basically when we are sending the props into a componenet at the end of the day we are passing it like

# the arguments to a function in javascript

# Lesson - 7

How does useEffect hook come ?

# IT comes from the named import from react

USE EFFECT IS CALLED WITH TWO ARGUMENTS \_
1 ) is callback function
2)dependency array
when is the use effect called

- useEffect is called after every render f that component
  only callback function is mandatory in the argument the depency array is not that important
  case 1:
  useEffect(()=>{
  with callback function
  })
  so if the useeffect is rendered only with the callback function then the useeffect will be rendered everytime wheneveer the component is rendered

case 2:
what if useEffect hook is rendered with callback function and empty array ?

- whenever
  useEffect (()=>{

},[])
useEffect is rendered like this then the useEffect will be rendered only once only at the time of initialization

case 3 :
what if useEffect is rendered with a array having value for eg :
useEffect (()=>{

},[someArray])
so now the use effect will be rendered everytime whenever the array - [someArray will be updated ]


# useState hook explained

- useState hook should not be used above the component it will throw a error 
- useState hook should not  be put in the if else block in the react docs it is mentioned that if u mess up with react the react will  mess with u .
- never create use state inside for loop , function . the state variables are meant to be created inside the function component at the top and no where else .


# shortcut to render a component -rafce in vscode

# react router dom gives a special  hook for handling error 
# whenever a function starts with use it is a hook 
- import useRouterError from react -roter -dom 
- const error = useRouterError();
console.log(error);
it will print the detailed  error 


# client -side routing - 
- client side routing is when when we are not  sending any network call to backend and only refreshing our components is known as client side routing 
in react we use client side routing 
# server - side routing is when when we are sending a network call to the page  getting the data of the page and loading the complete page   and it is therefore not used in react


 # what does modularity means 
  - modularity means you break down your code into small smmal  chunks so that your code becomes more maintainable and more testable .
  
  Distributing your code into smaller smaller code chunks makes your project more modular and testable 
  one more advantage is    that you get resuablity and it follows a single responsibility principle .
  single responsibility principle does not have a hard and fast rule but what i am trying to say is keep your components as light as possible .

  we can optimize our code  by creating custom hooks .
  what are hooks - hooks are normal javascript function but they are special javascript function as they are given to us by react for eg :useeffect hook , useState hook , useParams

  Hooks are like utilty functions ultimately . 

  For custom hooks as  at the end of the day they are the helper functions only so it is a best practice to keep them in utlity folder . 
  and always start the custom hooks with "use" in the starting  because  by the "use" the react will come to know that it is a custom hook . 

  whenever you write a hook think of it as a contract and service so there is a contract and what is the hook providing the service and what actually we want as a service .


  //CHUNKING ,Code splitting , dynamic bundling , lazy loading ,on demand loading 

  it is used for lazy loading that is when we need it then only it should load and bundled in a new file .
  app bundle size is increasing to bundle it we need the lazy loading this is also known as dynamic import 
  

  # we shoukd avaoid props drilling 
  to avaoid props drilling react gives us a super power of react Context .
  for eg : we need user info everywhere 
  so one way to avoid props drilling is context api 
  context is a way where you can put the data at a central place and use it anywhere .

  # redux toolkit 
- install @redux.js/toolkit and react-redux
- build our store 
- connect our store to uour app 
- create a slice in redux store
- when click on add btn dispatch an action 
- 
